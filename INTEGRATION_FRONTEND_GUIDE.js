/**
 * GUIDE D'INT√âGRATION - Phase 3 Frontend
 * ========================================
 * 
 * Instructions pour int√©grer les widgets de soldes de cong√©s 
 * dans votre composant AbsenceRequests.jsx existant
 */

// ============================================================================
// √âTAPE 1 : IMPORTS
// ============================================================================

// En haut de AbsenceRequests.jsx, ajouter ces imports :

import LeaveBalanceWidget from './LeaveBalanceWidget';
import LeaveTransactionHistory from './LeaveTransactionHistory';
import { AlertTriangle } from 'lucide-react'; // Pour les alertes


// ============================================================================
// √âTAPE 2 : STATE POUR LA VALIDATION DES SOLDES
// ============================================================================

// Dans la section des states (apr√®s const [newRequest, setNewRequest] = useState(...))
// Ajouter :

const [employeeBalances, setEmployeeBalances] = useState(null);
const [validationError, setValidationError] = useState(null);


// ============================================================================
// √âTAPE 3 : FONCTION DE V√âRIFICATION DU SOLDE
// ============================================================================

// Ajouter cette fonction avant handleSubmitRequest :

/**
 * V√©rifie si l'employ√© a assez de jours disponibles pour le type de cong√© demand√©
 */
const checkLeaveBalance = async (leaveType, requestedDays, employeeId) => {
  try {
    const token = localStorage.getItem('token');
    const response = await fetch(
      `${process.env.REACT_APP_BACKEND_URL}/api/leave-balance/${employeeId}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (response.ok) {
      const data = await response.json();
      setEmployeeBalances(data);
      
      // Normaliser le type (CP ‚Üí CA)
      const normalizedType = normalizeAbsenceType(leaveType);
      const availableBalance = data.balances[normalizedType] || 0;
      
      // V√©rifier si le solde est suffisant
      if (requestedDays > availableBalance) {
        setValidationError({
          type: normalizedType,
          available: availableBalance,
          requested: requestedDays,
          message: `Solde insuffisant : vous avez ${availableBalance} jour(s) de ${normalizedType} disponible(s), mais vous demandez ${requestedDays} jour(s)`
        });
        return false;
      }
      
      setValidationError(null);
      return true;
    }
    
    // Si pas de solde trouv√© (404), on autorise quand m√™me (pas encore initialis√©)
    if (response.status === 404) {
      console.warn('‚ö†Ô∏è Solde non trouv√© pour cet employ√©, autorisation par d√©faut');
      return true;
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification solde:', error);
    // En cas d'erreur, on autorise (ne pas bloquer l'utilisateur)
    return true;
  }
};


// ============================================================================
// √âTAPE 4 : MODIFIER handleSubmitRequest
// ============================================================================

// Remplacer la fonction handleSubmitRequest existante par :

const handleSubmitRequest = async (e) => {
  e.preventDefault();
  
  // Calculer la dur√©e
  const start = new Date(newRequest.startDate);
  const end = new Date(newRequest.endDate);
  const diffTime = Math.abs(end - start);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
  
  // Pour les types d√©compt√©s (CA, RTT, etc.), v√©rifier le solde
  const deductedTypes = ['CA', 'CP', 'CT', 'RTT', 'REC', 'CEX'];
  const normalizedType = normalizeAbsenceType(newRequest.type);
  
  if (deductedTypes.includes(normalizedType)) {
    const requestedDays = newRequest.absence_unit === 'heures' 
      ? parseFloat(newRequest.hours_amount) / 7 
      : diffDays;
    
    // üÜï V√âRIFICATION DU SOLDE
    const hasEnoughBalance = await checkLeaveBalance(
      normalizedType,
      requestedDays,
      newRequest.employee_id || user.id
    );
    
    if (!hasEnoughBalance) {
      // Afficher l'erreur de validation (le message est d√©j√† dans validationError)
      return; // Arr√™ter la soumission
    }
  }
  
  try {
    const token = localStorage.getItem('token');
    
    // Pr√©parer les donn√©es pour l'API
    const absenceData = {
      employee_id: newRequest.employee_id || user.id,
      employee_name: newRequest.employee_name || user.name,
      email: user.email,
      motif_absence: newRequest.type,
      date_debut: newRequest.startDate,
      date_fin: newRequest.endDate,
      jours_absence: newRequest.absence_unit === 'heures' ? 
        (parseFloat(newRequest.hours_amount) / 7).toFixed(2) : 
        diffDays.toString(),
      notes: newRequest.reason,
      status: 'pending',
      absence_unit: newRequest.absence_unit,
      hours_amount: newRequest.absence_unit === 'heures' ? parseFloat(newRequest.hours_amount) : null,
      created_by: user.id
    };
    
    console.log('üì§ Envoi nouvelle demande d\'absence:', absenceData);
    
    const response = await fetch(
      `${process.env.REACT_APP_BACKEND_URL}/api/absences`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(absenceData)
      }
    );
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Demande cr√©√©e avec succ√®s:', result);
      
      // üÜï Message am√©lior√© avec info sur les compteurs
      let successMessage = '‚úÖ Demande d\'absence cr√©√©e avec succ√®s';
      
      if (deductedTypes.includes(normalizedType)) {
        successMessage += `\n\nüìä Solde mis √† jour : ${normalizedType} d√©compt√© automatiquement`;
      }
      
      alert(successMessage);
      
      // Recharger les donn√©es
      loadAbsencesFromAPI();
      
      // Fermer le modal
      setShowNewRequest(false);
      
      // R√©initialiser le formulaire et les erreurs
      setValidationError(null);
      setNewRequest({ 
        type: 'CP', 
        startDate: '', 
        endDate: '', 
        reason: '', 
        halfDay: false, 
        documents: [], 
        requiresAcknowledgment: false,
        absence_unit: 'jours',
        hours_amount: null,
        employee_id: user?.id || '',
        employee_name: user?.name || ''
      });
    } else {
      const error = await response.json();
      console.error('‚ùå Erreur cr√©ation demande:', error);
      alert(`‚ùå Erreur: ${error.detail || 'Impossible de cr√©er la demande'}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation demande:', error);
    alert('‚ùå Erreur lors de la cr√©ation de la demande');
  }
};


// ============================================================================
// √âTAPE 5 : AJOUTER L'AFFICHAGE DE L'ERREUR DE VALIDATION DANS LE FORMULAIRE
// ============================================================================

// Dans le formulaire modal (juste apr√®s l'ouverture de <form onSubmit={handleSubmitRequest}>)
// Ajouter ce bloc d'alerte AVANT les autres champs :

{/* üÜï Alerte de validation du solde */}
{validationError && (
  <div className="bg-red-50 border-2 border-red-300 rounded-xl p-4 mb-4">
    <div className="flex items-start space-x-3">
      <AlertTriangle className="w-6 h-6 text-red-600 flex-shrink-0" />
      <div className="flex-1">
        <h4 className="font-bold text-red-800 mb-2">‚ùå Solde insuffisant</h4>
        <p className="text-sm text-red-700 mb-3">{validationError.message}</p>
        
        <div className="bg-white rounded-lg p-3 space-y-2">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Solde disponible :</span>
            <span className="font-bold text-red-700">
              {validationError.available} jour(s)
            </span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Jours demand√©s :</span>
            <span className="font-bold text-red-700">
              {validationError.requested} jour(s)
            </span>
          </div>
          <div className="flex items-center justify-between text-sm border-t border-gray-200 pt-2">
            <span className="text-gray-600">Manquant :</span>
            <span className="font-bold text-red-700">
              {(validationError.requested - validationError.available).toFixed(1)} jour(s)
            </span>
          </div>
        </div>
        
        <p className="text-xs text-red-600 mt-3">
          üí° Veuillez ajuster votre demande ou contacter les RH
        </p>
      </div>
    </div>
  </div>
)}


// ============================================================================
// √âTAPE 6 : AJOUTER LES WIDGETS DANS LA PAGE
// ============================================================================

// Option A : Afficher les widgets AVANT les statistiques rapides
// (Juste apr√®s le <ModuleHeader> et avant <div className="space-y-4">)

{/* üÜï Widgets de soldes et historique - Visible uniquement pour les employ√©s */}
{isEmployee && (
  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
    <LeaveBalanceWidget employeeId={user.id} />
    <LeaveTransactionHistory employeeId={user.id} limit={10} />
  </div>
)}

// OU

// Option B : Afficher les widgets dans un onglet s√©par√©
// (Si vous utilisez un syst√®me d'onglets, cr√©er un onglet "Mes Soldes")


// ============================================================================
// √âTAPE 7 : AJOUTER UN INDICATEUR DE SOLDE DANS LA LISTE DES DEMANDES
// ============================================================================

// Dans le rendu de chaque demande, vous pouvez ajouter un badge indiquant le type d√©compt√©
// Juste apr√®s le badge de statut, ajouter :

{['CA', 'CP', 'CT', 'RTT', 'REC', 'CEX'].includes(normalizeAbsenceType(request.type)) && (
  <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
    üíº D√©compt√©
  </span>
)}


// ============================================================================
// EXEMPLE COMPLET DE PLACEMENT DANS LA PAGE
// ============================================================================

/*
return (
  <div className="p-6 space-y-6">
    {/* Header *}
    <ModuleHeader
      title={isEmployee ? 'Mes Demandes d\'Absence' : 'Demandes d\'Absence'}
      subtitle={isEmployee 
        ? 'Gestion de vos demandes d\'absence et suivi des validations'
        : 'Validation et suivi des demandes d\'absence des employ√©s'
      }
      icon="üìù"
      action={
        <Button
          onClick={() => setShowNewRequest(true)}
          variant="primary"
          icon="‚ûï"
        >
          Nouvelle Demande
        </Button>
      }
    />

    {/* üÜï WIDGETS DE SOLDES - Pour employ√©s uniquement *}
    {isEmployee && (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <LeaveBalanceWidget employeeId={user.id} />
        <LeaveTransactionHistory employeeId={user.id} limit={10} />
      </div>
    )}

    {/* Statistiques rapides *}
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {/* ... vos stats existantes ... *}
    </div>

    {/* Liste des demandes *}
    <div className="bg-white/70 backdrop-blur-sm border-2 border-purple-200 rounded-xl p-6">
      {/* ... votre liste existante ... *}
    </div>

    {/* Modals existants ... *}
  </div>
);
*/


// ============================================================================
// √âTAPE 8 : VARIANTE POUR ADMIN/MANAGER
// ============================================================================

// Pour les admins/managers, vous pouvez afficher les soldes de l'employ√© s√©lectionn√©
// dans le modal de cr√©ation de demande :

{/* Dans le modal, apr√®s la s√©lection de l'employ√© */}
{(user.role === 'admin' || user.role === 'manager') && newRequest.employee_id && (
  <div className="mt-4">
    <LeaveBalanceWidget employeeId={newRequest.employee_id} compact={true} />
  </div>
)}


// ============================================================================
// TESTS DE VALIDATION
// ============================================================================

/**
 * Sc√©narios √† tester apr√®s int√©gration :
 * 
 * 1. ‚úÖ Employ√© avec solde suffisant
 *    - Cr√©er demande 5j CA avec solde 25j
 *    - ‚Üí Doit passer sans erreur
 * 
 * 2. ‚ùå Employ√© avec solde insuffisant
 *    - Cr√©er demande 30j CA avec solde 25j
 *    - ‚Üí Doit afficher alerte rouge avec d√©tails
 *    - ‚Üí Bouton "Soumettre" doit √™tre d√©sactiv√© ou bloqu√©
 * 
 * 3. üîÑ Apr√®s approbation
 *    - Widget soldes doit se mettre √† jour automatiquement
 *    - Historique doit afficher la nouvelle transaction "deduct"
 * 
 * 4. ‚úÖ Apr√®s r√©int√©gration (AM)
 *    - Si AM interrompt CA, widget doit montrer badge vert de r√©int√©gration
 *    - Historique doit montrer transaction "reintegrate"
 * 
 * 5. üéØ Admin cr√©ant demande pour employ√©
 *    - S√©lectionner employ√© dans dropdown
 *    - Widget compact doit afficher les soldes de l'employ√© s√©lectionn√©
 *    - Validation doit se faire sur les soldes de l'employ√©, pas de l'admin
 */


// ============================================================================
// D√âPANNAGE
// ============================================================================

/**
 * Probl√®me : "Employee balance not found (404)"
 * Solution : C'est normal si l'employ√© n'a pas encore de solde initialis√©.
 *            Lancez l'endpoint admin pour initialiser :
 *            POST /api/leave-balance/admin/initialize-balances
 * 
 * Probl√®me : Les widgets ne se rafra√Æchissent pas apr√®s cr√©ation d'absence
 * Solution : V√©rifiez que l'√©v√©nement 'websocket-absence-change' est bien √©mis
 *            apr√®s la cr√©ation/approbation d'une absence
 * 
 * Probl√®me : "Solde insuffisant" s'affiche alors que l'employ√© a des jours
 * Solution : V√©rifiez la normalisation CP ‚Üí CA. Le backend stocke en "CA"
 *            mais le frontend peut envoyer "CP". Utilisez normalizeAbsenceType()
 * 
 * Probl√®me : Import Lucide React √©choue
 * Solution : Installer lucide-react : npm install lucide-react
 */


// ============================================================================
// PERSONNALISATION
// ============================================================================

/**
 * Vous pouvez personnaliser :
 * 
 * 1. Couleurs des types de cong√©s
 *    ‚Üí Modifier leaveTypeConfig dans LeaveBalanceWidget.jsx
 * 
 * 2. Nombre de transactions affich√©es
 *    ‚Üí Changer la prop "limit" de LeaveTransactionHistory
 * 
 * 3. Affichage compact ou complet
 *    ‚Üí Utiliser la prop "compact={true}" pour version mini
 * 
 * 4. Position des widgets
 *    ‚Üí Les placer o√π vous voulez dans la page
 *    ‚Üí Possibilit√© de cr√©er une page d√©di√©e "Mon Espace / Mes Soldes"
 */


// ============================================================================
// FIN DU GUIDE
// ============================================================================

console.log('‚úÖ Guide d\'int√©gration Phase 3 Frontend termin√©');
console.log('üìö Consultez les fichiers suivants :');
console.log('   - LeaveBalanceWidget.jsx');
console.log('   - LeaveTransactionHistory.jsx');
console.log('   - Ce guide d\'int√©gration');
