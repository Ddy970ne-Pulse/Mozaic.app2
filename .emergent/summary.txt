<analysis>
The AI engineer's trajectory focused on enhancing the MOZAIK RH application, addressing critical bugs, and implementing new features. Initial efforts involved unifying CSE/Delegation modules, debugging a missing Mes Demandes tab, and creating backend endpoints for CSE cessions. Subsequently, the engineer tackled Absence en Heures by modifying Pydantic models and adding conversion utilities. A major UI harmonization effort was initiated, centralizing styles into , but this led to JSX errors requiring extensive debugging in . Critical data persistence issues (imported data disappearing) were diagnosed, pointing to accidental deletion via a reset-demo endpoint and missing persistence for imported data. Recent work involved implementing a robust absence priority and re-integration logic in  and developing backend models/APIs for absence counters. The trajectory ended mid-diagnosis of the data persistence problem, with a plan to implement a data seeding solution.
</analysis>
<product_requirements>
The MOZAIK RH application is designed as a comprehensive HR management system, currently featuring:
1.  **UI/UX**: Responsive, glassmorphism-style hamburger menu, dynamic colors, compact tile design. An ongoing task is to generalize the Mon Espace visual style across all modules for harmonization.
2.  **Mass Data Integration (Excel Import)**: Robust parsing for personnel, absences, and worked hours, including correct French date mapping, auto-generated emails/passwords, accurate CSE member identification. The system must prevent accidental data deletion during imports.
3.  **Admin & User Management**: Admin setup, user CRUD, password hashing, individual deletion, and data persistence.
4.  **Data Integrity & Cleanup**: Eliminate hardcoded data and ensure optional fields are stored.
5.  **Temporary Password System**: Secure auto-generated passwords requiring first-login change.
6.  **Dashboard Data**: Display real-time, dynamic data.
7.  **Event Management**: API and system for Événements à venir.
8.  **Mobile Accessibility (PWA)**: Installable PWA with real-time data.
9.  **CSE Management Module**: Unified module for CSE members, delegation hours (CCN66 compliant), prise de connaissance validation, dynamic delegate selection, and cession (hour transfers).
10. **Dynamic Temporal Data Handling**: Modules (Planning, Analytics, Reports) adapt to new years, filter data by period, and prevent data bleeding.
11. **Overtime & Recovery**: Heures Travaillées integrate into Overtime, and Récupération absences affect overtime.
12. **Personal Space**: Mon Espace for Admin/Manager/RH with personal requests.
13. **Absences in Hours**: Allow specific absence types (overtime, delegation, recovery, telework) to be requested and displayed in hours (HH:MM), with 8 hours = 1 day conversion, impacting payroll, planning, and statistics.
14. **Absence Logic**: Ensure absence calculation respects weekends/holidays and implements priority rules (e.g., sick leave interrupts annual leave), correctly affecting remaining balances.
</product_requirements>
<key_technical_concepts>
-   **Full-Stack**: React (frontend with Hooks), FastAPI (Python backend).
-   **Database**: MongoDB (using UUIDs).
-   **UI/UX**: Responsive CSS, Tailwind CSS, glassmorphism design, reusable UI components ().
-   **Data Processing**:  for Excel parsing, complex date/time conversions.
-   **Authentication/Authorization**: JWT, bcrypt, role-based access control.
-   **API Design**: RESTful APIs, Pydantic for data validation.
-   **Mobile Development**: Progressive Web App (PWA).
</key_technical_concepts>
<code_architecture>

-   ****:
    -   **Importance**: Central for FastAPI routes and MongoDB models.
    -   **Changes**: Added , , ,  Pydantic models. Created new API endpoints for CSE cessions (), leave balances (, ), and re-integration (). Modified , ,  models to include  and  fields. Added  and  utility functions.  endpoint was identified as a data deletion risk.
-   ****:
    -   **Importance**: Manages global layout and navigation.
    -   **Changes**: Integrated , . Removed imports and rendering logic for old  and . Corrected 'Aide' menu item to correctly route to . Removed unused  and old  imports.
-   ****:
    -   **Importance**: Handles Excel uploads.
    -   **Changes**: Modified to hide the Réinitialiser comptes button within a collapsible Danger Zone to prevent accidental data deletion. Added stronger warning to the confirmation.
-   ****:
    -   **Importance**: Displays monthly planning.
    -   **Changes**: Added  helper. Modified  and  functions to respect  and  rules for absence types and implement absence priority logic (e.g., sick leave overriding annual leave). Integrated calls to  API for updating leave counters.
-   ****:
    -   **Importance**: Manages absence requests.
    -   **Changes**: Added state for  and . Implemented  function. Modified the absence request form to include a toggle for days/hours and an input for hours. Debugged and extensively cleaned up JSX structure due to compilation errors and duplicated content. Removed unused  and  imports.
-   ****, ****, ****:
    -   **Importance**: Core application modules.
    -   **Changes**: Initiated UI harmonization by replacing older UI elements with new reusable components from . Removed unused  and  imports in Dashboard.js.
-   ** (New File)**:
    -   **Importance**: Unified module for CSE management.
    -   **Changes**: Newly created, in development for integrating CSE member management, delegation hours, and cession functionalities.
-   ** (New File)**:
    -   **Importance**: Centralized reusable UI components for consistent design.
    -   **Changes**: Created components like , , , , , , , , . Resolved initial export issues (default vs. named exports).
-   ** (New File)**:
    -   **Importance**: Provides help/guidance to users.
    -   **Changes**: Newly created simple component, integrated into the  routing.
-   ****, ****, ****, ****, ****, ****, ****: New documentation files created to track problem analysis, implementation details, and testing guides for specific features/fixes.
</code_architecture>
<pending_tasks>
-   **UI Bug**: Duplicate hamburger menu persists.
-   **UI Bug**: Mes Demandes tab is present in  code but not visible to the user.
-   **PWA Confirmation**: Verify full PWA functionality.
-   **CSE Unification**: Complete the frontend integration and logic for .
-   **Absence in Hours**: Finalize display in Planning, Export Paie, and Statistics modules.
-   **Analytics & KPI**: Complete missing analyses and visualizations based on user-provided images.
-   **UI Harmonization**: Finish applying the Mon Espace style to all remaining modules.
-   **Data Persistence**: Implement a solution for imported data disappearing after restarts (beyond just hiding reset button and suggesting backup/restore).
-   **Absence Counters**: Fully implement the logic for updating leave balances when absences are re-integrated or overridden.
-   **Merge Analytics Modules**: Consolidate , , and .
</pending_tasks>
<current_work>
Immediately before this summary request, the AI engineer was addressing a critical data persistence issue. The user reported that imported employee, absence, and work hour data disappeared after the application restarted or forking. The engineer confirmed this by inspecting MongoDB collections, noting that  and  collections were empty, while  and  persisted.

The engineer previously identified that a  endpoint was deleting data and mitigated this by hiding the associated frontend button in a Danger Zone. However, the current problem indicates a deeper issue: imported data is either not being properly persisted in MongoDB (despite frontend sending to backend and backend appearing to save), or it's being deleted by another mechanism not yet identified.

The last action taken was to propose a solution involving creating an automatic backup system and a rapid restoration script, along with a seed endpoint to quickly reload data for debugging and development. The engineer was about to create this seed endpoint to address the disappearing data.
keep all imported datas. Never delete them as they are important
</current_work>
<optional_next_step>
Create a backend seed endpoint to quickly re-populate demo data.
</optional_next_step>
