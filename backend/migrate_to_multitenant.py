"""
Migration Multi-Tenant - MOZAIK RH
Migrer les donn√©es existantes vers l'architecture multi-tenant pour AAEA CAVA
CORRIG√â: Fix erreurs d'emails dupliqu√©s et de syntaxe MongoDB
"""
import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
from collections import defaultdict

load_dotenv()

MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')

# Bases de donn√©es
SOURCE_DB_NAME = "mozaik_rh"  # Base actuelle avec toutes les donn√©es
CENTRAL_DB_NAME = "mozaik_central"  # Base centrale pour config tenants
TARGET_TENANT_ID = "aaea-cava"
TARGET_DB_NAME = f"mozaik_{TARGET_TENANT_ID.replace('-', '_')}"


async def deduplicate_emails(source_db):
    """
    Identifier et corriger les emails dupliqu√©s avant migration
    """
    print("\nüîç V√©rification des emails dupliqu√©s...")
    
    # Grouper les users par email
    email_counts = defaultdict(list)
    
    async for user in source_db.users.find({}):
        email = user.get("email", "")
        email_counts[email].append(user)
    
    # Identifier les doublons
    duplicates = {email: users for email, users in email_counts.items() if len(users) > 1}
    
    if not duplicates:
        print("  ‚úÖ Aucun email dupliqu√© trouv√©")
        return []
    
    print(f"  ‚ö†Ô∏è  {len(duplicates)} emails dupliqu√©s trouv√©s:")
    
    dedup_actions = []
    for email, users in duplicates.items():
        print(f"\n    Email: {email} ({len(users)} comptes)")
        for i, user in enumerate(users, 1):
            print(f"      {i}. {user.get('name', 'N/A')} - ID: {user.get('id', 'N/A')} - Role: {user.get('role', 'N/A')}")
        
        # Strat√©gie: garder le premier, suffixer les autres
        for idx, user in enumerate(users):
            if idx == 0:
                # Garder le premier tel quel
                dedup_actions.append(("keep", user))
            else:
                # Suffixer les autres: email+idx@domain.com
                original_email = user["email"]
                parts = original_email.split("@")
                if len(parts) == 2:
                    new_email = f"{parts[0]}+dup{idx}@{parts[1]}"
                else:
                    new_email = f"{original_email}_dup{idx}"
                
                print(f"      ‚Üí {user.get('name')} sera renomm√©: {new_email}")
                dedup_actions.append(("rename", user, new_email))
    
    return dedup_actions


async def migrate_to_multitenant():
    """
    Migration compl√®te vers architecture multi-tenant
    
    √âtapes:
    1. Cr√©er la base centrale avec config tenant AAEA CAVA
    2. D√©dupliquer les emails
    3. Cr√©er la base d√©di√©e pour AAEA CAVA
    4. Copier toutes les donn√©es de mozaik_rh vers mozaik_aaea_cava
    5. V√©rifier l'int√©grit√© des donn√©es
    """
    print("üöÄ D√©but de la migration multi-tenant...")
    
    client = AsyncIOMotorClient(MONGO_URL)
    
    # Bases de donn√©es
    source_db = client[SOURCE_DB_NAME]
    central_db = client[CENTRAL_DB_NAME]
    target_db = client[TARGET_DB_NAME]
    
    try:
        # ==================== √âTAPE 1: Cr√©er config tenant dans base centrale ====================
        print("\nüìã √âTAPE 1: Cr√©ation de la configuration tenant...")
        
        # V√©rifier si le tenant existe d√©j√†
        existing_tenant = await central_db.tenants.find_one({"tenant_id": TARGET_TENANT_ID})
        
        if existing_tenant:
            print(f"‚ö†Ô∏è  Tenant '{TARGET_TENANT_ID}' existe d√©j√† dans la base centrale")
            # Supprimer l'ancien (pas de confirmation pour script automatis√©)
            await central_db.tenants.delete_one({"tenant_id": TARGET_TENANT_ID})
            print(f"  ‚úÖ Ancienne config supprim√©e")
        
        # Cr√©er la config tenant
        tenant_config = {
            "tenant_id": TARGET_TENANT_ID,
            "tenant_name": "AAEA CAVA",
            "db_name": TARGET_DB_NAME,
            "admin_email": "ddacalor@aaea-gpe.fr",
            "status": "active",
            "created_at": "2025-01-30T00:00:00Z",
            "settings": {
                "max_users": 1000,
                "features": ["planning", "absences", "cse", "analytics", "astreintes"]
            }
        }
        
        await central_db.tenants.insert_one(tenant_config)
        print(f"‚úÖ Tenant '{TARGET_TENANT_ID}' cr√©√© dans base centrale")
        
        # ==================== √âTAPE 2: D√©dupliquer les emails ====================
        dedup_actions = await deduplicate_emails(source_db)
        
        # ==================== √âTAPE 3: Copier les donn√©es ====================
        print(f"\nüì¶ √âTAPE 3: Copie des donn√©es de '{SOURCE_DB_NAME}' vers '{TARGET_DB_NAME}'...")
        
        # Liste des collections √† copier
        collections = [
            "users",
            "absences",
            "absence_requests",
            "notifications",
            "leave_balances",
            "leave_transactions",
            "cse_cessions",
            "on_call_assignments",
            "overtime_records",
            "absence_types_config",
            "hr_config"
        ]
        
        migration_stats = {}
        
        for collection_name in collections:
            print(f"\n  üìÑ Migration de la collection '{collection_name}'...")
            
            # Compter les documents source
            source_count = await source_db[collection_name].count_documents({})
            print(f"     Source: {source_count} documents")
            
            if source_count == 0:
                print(f"     ‚ö†Ô∏è  Collection vide, skip")
                migration_stats[collection_name] = {"source": 0, "target": 0, "status": "empty"}
                continue
            
            # Nettoyer la collection target si elle existe
            target_count_before = await target_db[collection_name].count_documents({})
            if target_count_before > 0:
                print(f"     ‚ö†Ô∏è  Collection target contient d√©j√† {target_count_before} documents, nettoyage...")
                await target_db[collection_name].delete_many({})
                print(f"     ‚úÖ Collection vid√©e")
            
            # Copier les documents par batch
            batch_size = 100
            total_copied = 0
            
            cursor = source_db[collection_name].find({})
            batch = []
            
            async for doc in cursor:
                # Retirer le _id MongoDB pour √©viter les conflits
                doc.pop("_id", None)
                
                # Appliquer les d√©duplication d'emails si collection users
                if collection_name == "users" and dedup_actions:
                    user_email = doc.get("email")
                    for action_type, action_user, *args in dedup_actions:
                        if action_user.get("email") == user_email and action_type == "rename":
                            new_email = args[0]
                            print(f"     üîÑ Renommage: {user_email} ‚Üí {new_email}")
                            doc["email"] = new_email
                            break
                
                batch.append(doc)
                
                if len(batch) >= batch_size:
                    await target_db[collection_name].insert_many(batch)
                    total_copied += len(batch)
                    print(f"     üìà {total_copied}/{source_count} documents copi√©s...", end='\r')
                    batch = []
            
            # Ins√©rer le dernier batch
            if batch:
                await target_db[collection_name].insert_many(batch)
                total_copied += len(batch)
            
            print(f"     ‚úÖ {total_copied} documents copi√©s                    ")
            
            # V√©rifier le count final
            target_count_after = await target_db[collection_name].count_documents({})
            migration_stats[collection_name] = {
                "source": source_count,
                "target": target_count_after,
                "status": "success" if source_count == target_count_after else "warning"
            }
        
        # ==================== √âTAPE 4: Cr√©er les index (sans unique pour emails) ====================
        print("\nüîç √âTAPE 4: Cr√©ation des index...")
        
        # Index pour users (PAS d'unique sur email √† cause des doublons)
        try:
            await target_db.users.create_index("id", unique=True)
            print("  ‚úÖ Index users.id (unique) cr√©√©")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Index users.id: {str(e)}")
        
        try:
            await target_db.users.create_index("email")  # Index simple, pas unique
            print("  ‚úÖ Index users.email cr√©√©")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Index users.email: {str(e)}")
        
        # Index pour absences
        try:
            await target_db.absences.create_index("employee_id")
            await target_db.absences.create_index("date_debut")
            await target_db.absences.create_index("status")
            print("  ‚úÖ Index absences cr√©√©s")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Index absences: {str(e)}")
        
        # Index pour leave_balances
        try:
            await target_db.leave_balances.create_index([("employee_id", 1), ("year", 1)], unique=True)
            print("  ‚úÖ Index leave_balances cr√©√©")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Index leave_balances: {str(e)}")
        
        # ==================== √âTAPE 5: V√©rification ====================
        print("\n‚úÖ √âTAPE 5: V√©rification de l'int√©grit√©...")
        
        all_success = True
        for collection_name, stats in migration_stats.items():
            status_icon = "‚úÖ" if stats["status"] == "success" else "‚ö†Ô∏è" if stats["status"] == "warning" else "‚è≠Ô∏è"
            print(f"  {status_icon} {collection_name}: {stats['source']} ‚Üí {stats['target']} ({stats['status']})")
            
            if stats["status"] not in ["success", "empty", "skipped"]:
                all_success = False
        
        # ==================== R√âSULTAT ====================
        print("\n" + "=" * 70)
        if all_success:
            print("üéâ MIGRATION R√âUSSIE!")
            print(f"\n‚úÖ Tenant '{TARGET_TENANT_ID}' est maintenant op√©rationnel")
            print(f"   Base de donn√©es: {TARGET_DB_NAME}")
            print(f"   Admin: ddacalor@aaea-gpe.fr")
            print(f"\nüìù Pour utiliser le tenant, ajouter le header HTTP:")
            print(f"   X-Tenant-Id: {TARGET_TENANT_ID}")
            print(f"\n   Ou le query parameter:")
            print(f"   ?tenant_id={TARGET_TENANT_ID}")
        else:
            print("‚ö†Ô∏è  MIGRATION COMPL√âT√âE AVEC AVERTISSEMENTS")
            print("   V√©rifiez les collections ci-dessus")
        print("=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå ERREUR lors de la migration: {str(e)}")
        import traceback
        traceback.print_exc()
    
    finally:
        client.close()


if __name__ == "__main__":
    print("üè¢ Migration Multi-Tenant - MOZAIK RH")
    print("=" * 70)
    print(f"Source: {SOURCE_DB_NAME}")
    print(f"Target: {TARGET_DB_NAME}")
    print(f"Tenant: {TARGET_TENANT_ID} (AAEA CAVA)")
    print("=" * 70)
    print("\n‚ö†Ô∏è  ATTENTION: Cette migration va:")
    print("  1. Cr√©er une nouvelle base de donn√©es pour AAEA CAVA")
    print("  2. Copier TOUTES les donn√©es de la base actuelle")
    print("  3. Corriger automatiquement les emails dupliqu√©s")
    print("  4. La base source ne sera PAS modifi√©e (backup automatique)")
    print("\n")
    
    print("üöÄ Lancement automatique de la migration...")
    asyncio.run(migrate_to_multitenant())
