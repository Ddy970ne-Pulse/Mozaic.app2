"""
Service de gestion des soldes de cong√©s
MOZAIK RH - Conformit√© l√©gale r√©int√©gration cong√©s

Ce service g√®re :
- Calcul et mise √† jour des soldes
- R√©int√©gration automatique des cong√©s interrompus par maladie
- Historique des transactions
- Validation des soldes avant approbation

Adapt√© pour utiliser UUID au lieu d'ObjectId
"""

from motor.motor_asyncio import AsyncIOMotorDatabase
from datetime import datetime, date
from typing import Optional, List, Dict
import logging
import uuid

logger = logging.getLogger(__name__)


# ============================================================================
# SERVICE : Gestion des soldes de cong√©s
# ============================================================================

class LeaveBalanceService:
    """Service g√©rant les soldes de cong√©s des employ√©s"""
    
    def __init__(self, db: AsyncIOMotorDatabase):
        self.db = db
        self.balances_collection = db.leave_balances
        self.transactions_collection = db.leave_transactions
        self.absences_collection = db.absences
    
    
    # ========================================================================
    # INITIALISATION & R√âCUP√âRATION
    # ========================================================================
    
    async def get_or_create_balance(self, user_id: str, fiscal_year: int) -> Dict:
        """
        R√©cup√®re ou cr√©e le solde d'un employ√© pour une ann√©e fiscale
        
        Args:
            user_id: ID de l'employ√©
            fiscal_year: Ann√©e fiscale (ex: 2025)
            
        Returns:
            Document de solde
        """
        balance = await self.balances_collection.find_one({
            "user_id": user_id,
            "fiscal_year": fiscal_year
        })
        
        if not balance:
            # Cr√©er un nouveau solde avec valeurs par d√©faut
            balance = {
                "id": str(uuid.uuid4()),
                "user_id": user_id,
                "fiscal_year": fiscal_year,
                "ca_balance": 25.0,  # D√©faut : 25 jours CA
                "rtt_balance": 12.0,  # D√©faut : 12 jours RTT
                "ct_balance": 0.0,    # D√©faut : 0 (d√©pend cat√©gorie)
                "rec_balance": 0.0,   # D√©faut : 0
                "last_updated": datetime.utcnow()
            }
            
            result = await self.balances_collection.insert_one(balance)
            
            logger.info(f"‚úÖ Solde cr√©√© pour user {user_id} (ann√©e {fiscal_year})")
        
        return balance
    
    
    async def get_balance(self, user_id: str, fiscal_year: Optional[int] = None) -> Dict:
        """
        R√©cup√®re le solde actuel d'un employ√©
        
        Args:
            user_id: ID de l'employ√©
            fiscal_year: Ann√©e fiscale (d√©faut: ann√©e en cours)
            
        Returns:
            Document de solde ou None
        """
        if fiscal_year is None:
            fiscal_year = datetime.now().year
        
        return await self.get_or_create_balance(user_id, fiscal_year)
    
    
    async def get_all_balances(self, fiscal_year: Optional[int] = None) -> List[Dict]:
        """
        R√©cup√®re tous les soldes pour une ann√©e fiscale
        
        Args:
            fiscal_year: Ann√©e fiscale (d√©faut: ann√©e en cours)
            
        Returns:
            Liste des soldes
        """
        if fiscal_year is None:
            fiscal_year = datetime.now().year
        
        cursor = self.balances_collection.find({"fiscal_year": fiscal_year})
        return await cursor.to_list(length=None)
    
    
    # ========================================================================
    # TRANSACTIONS & HISTORIQUE
    # ========================================================================
    
    async def create_transaction(
        self,
        user_id: str,
        operation_type: str,
        leave_type: str,
        amount: float,
        reason: str,
        created_by: str,
        balance_before: float,
        balance_after: float,
        absence_id: Optional[str] = None,
        replaced_absence_id: Optional[str] = None
    ) -> str:
        """
        Enregistre une transaction dans l'historique
        
        Args:
            user_id: ID de l'employ√©
            operation_type: Type d'op√©ration (DEDUCTION, REINTEGRATION, etc.)
            leave_type: Type de cong√© (CA, RTT, CT, REC)
            amount: Montant (positif ou n√©gatif)
            reason: Motif de la transaction
            created_by: Auteur (user_id ou "system")
            balance_before: Solde avant
            balance_after: Solde apr√®s
            absence_id: ID de l'absence li√©e (optionnel)
            replaced_absence_id: ID de l'absence remplac√©e (optionnel)
            
        Returns:
            ID de la transaction cr√©√©e
        """
        transaction = {
            "user_id": user_id,
            "operation_type": operation_type,
            "leave_type": leave_type,
            "amount": amount,
            "reason": reason,
            "created_by": created_by,
            "balance_before": balance_before,
            "balance_after": balance_after,
            "absence_id": absence_id,
            "replaced_absence_id": replaced_absence_id,
            "created_at": datetime.utcnow()
        }
        
        result = await self.transactions_collection.insert_one(transaction)
        logger.info(f"üìù Transaction cr√©√©e : {operation_type} {amount}j ({leave_type}) pour user {user_id}")
        
        return str(result.inserted_id)
    
    
    async def get_transaction_history(
        self, 
        user_id: str, 
        limit: int = 50
    ) -> List[Dict]:
        """
        R√©cup√®re l'historique des transactions d'un employ√©
        
        Args:
            user_id: ID de l'employ√©
            limit: Nombre max de transactions √† retourner
            
        Returns:
            Liste des transactions (plus r√©centes en premier)
        """
        cursor = self.transactions_collection.find(
            {"user_id": user_id}
        ).sort("created_at", -1).limit(limit)
        
        return await cursor.to_list(length=limit)
    
    
    # ========================================================================
    # MISE √Ä JOUR DES SOLDES
    # ========================================================================
    
    async def update_balance(
        self,
        user_id: str,
        leave_type: str,
        amount: float,
        operation_type: str,
        reason: str,
        created_by: str,
        absence_id: Optional[str] = None,
        replaced_absence_id: Optional[str] = None,
        fiscal_year: Optional[int] = None
    ) -> Dict:
        """
        Met √† jour le solde d'un employ√© et enregistre la transaction
        
        Args:
            user_id: ID de l'employ√©
            leave_type: Type de cong√© (CA, RTT, CT, REC)
            amount: Montant √† ajouter (positif) ou retirer (n√©gatif)
            operation_type: Type d'op√©ration
            reason: Motif
            created_by: Auteur
            absence_id: ID absence li√©e
            replaced_absence_id: ID absence remplac√©e
            fiscal_year: Ann√©e fiscale
            
        Returns:
            Solde mis √† jour
        """
        if fiscal_year is None:
            fiscal_year = datetime.now().year
        
        # R√©cup√©rer le solde actuel
        balance = await self.get_or_create_balance(user_id, fiscal_year)
        
        # D√©terminer le champ √† modifier
        balance_field = f"{leave_type.lower()}_balance"
        balance_before = balance[balance_field]
        balance_after = max(0, balance_before + amount)  # √âviter soldes n√©gatifs
        
        # Mettre √† jour le solde
        await self.balances_collection.update_one(
            {"_id": balance["_id"]},
            {
                "$set": {
                    balance_field: balance_after,
                    "last_updated": datetime.utcnow()
                }
            }
        )
        
        # Enregistrer la transaction
        await self.create_transaction(
            user_id=user_id,
            operation_type=operation_type,
            leave_type=leave_type,
            amount=amount,
            reason=reason,
            created_by=created_by,
            balance_before=balance_before,
            balance_after=balance_after,
            absence_id=absence_id,
            replaced_absence_id=replaced_absence_id
        )
        
        logger.info(f"‚úÖ Solde mis √† jour : user {user_id}, {leave_type} {balance_before} ‚Üí {balance_after}")
        
        # Retourner le solde mis √† jour
        return await self.get_balance(user_id, fiscal_year)
    
    
    # ========================================================================
    # D√âDUCTION (Validation d'absence)
    # ========================================================================
    
    async def deduct_leave(
        self,
        user_id: str,
        leave_type: str,
        days: float,
        absence_id: str,
        approved_by: str
    ) -> Dict:
        """
        D√©duit des jours de cong√© lors de l'approbation d'une absence
        
        Args:
            user_id: ID de l'employ√©
            leave_type: Type de cong√© (CA, RTT, CT, REC)
            days: Nombre de jours √† d√©duire
            absence_id: ID de l'absence approuv√©e
            approved_by: ID de l'approbateur
            
        Returns:
            Solde mis √† jour
        """
        return await self.update_balance(
            user_id=user_id,
            leave_type=leave_type,
            amount=-days,  # N√©gatif pour d√©duction
            operation_type="DEDUCTION",
            reason=f"Approbation absence {absence_id} ({days} jours)",
            created_by=approved_by,
            absence_id=absence_id
        )
    
    
    # ========================================================================
    # R√âINT√âGRATION (Remplacement par maladie)
    # ========================================================================
    
    async def reintegrate_leave(
        self,
        user_id: str,
        leave_type: str,
        days: float,
        original_absence_id: str,
        sick_leave_absence_id: str,
        created_by: str = "system"
    ) -> Dict:
        """
        üî• FONCTION CL√â : R√©int√®gre des jours de cong√© suite √† un arr√™t maladie
        
        Sc√©nario :
        1. Employ√© pose CA du 15 au 19 janvier (5 jours) ‚Üí Approuv√© ‚Üí D√©duit
        2. Employ√© tombe malade du 17 au 19 janvier (3 jours)
        3. Cette fonction r√©int√®gre 3 jours de CA (jours chevauchants)
        
        Args:
            user_id: ID de l'employ√©
            leave_type: Type de cong√© √† r√©int√©grer (CA, RTT, CT, REC)
            days: Nombre de jours √† r√©int√©grer
            original_absence_id: ID de l'absence CA/RTT initiale
            sick_leave_absence_id: ID de l'arr√™t maladie
            created_by: Auteur (d√©faut: "system")
            
        Returns:
            Solde mis √† jour
        """
        reason = (
            f"R√©int√©gration {days} jour(s) de {leave_type} suite √† arr√™t maladie. "
            f"Absence initiale: {original_absence_id}, Arr√™t maladie: {sick_leave_absence_id}"
        )
        
        return await self.update_balance(
            user_id=user_id,
            leave_type=leave_type,
            amount=days,  # Positif pour r√©int√©gration
            operation_type="REINTEGRATION",
            reason=reason,
            created_by=created_by,
            absence_id=sick_leave_absence_id,
            replaced_absence_id=original_absence_id
        )
    
    
    # ========================================================================
    # D√âTECTION AUTOMATIQUE DES R√âINT√âGRATIONS
    # ========================================================================
    
    async def detect_and_reintegrate(self, sick_leave_absence: Dict) -> List[Dict]:
        """
        ü§ñ D√âTECTION AUTOMATIQUE : D√©tecte les cong√©s chevauch√©s par un arr√™t maladie
        et r√©int√®gre automatiquement les jours concern√©s
        
        Cette fonction est appel√©e automatiquement lors de :
        - L'approbation d'un arr√™t maladie
        - La cr√©ation d'un arr√™t maladie d√©j√† approuv√©
        
        Args:
            sick_leave_absence: Document de l'arr√™t maladie
            
        Returns:
            Liste des r√©int√©grations effectu√©es
        """
        if sick_leave_absence["absence_type"] != "MALADIE":
            return []
        
        user_id = sick_leave_absence["user_id"]
        sick_start = sick_leave_absence["start_date"]
        sick_end = sick_leave_absence["end_date"]
        
        # Convertir en datetime si n√©cessaire
        if isinstance(sick_start, str):
            sick_start = datetime.fromisoformat(sick_start.replace('Z', '+00:00'))
        if isinstance(sick_end, str):
            sick_end = datetime.fromisoformat(sick_end.replace('Z', '+00:00'))
        
        # Chercher les absences CA/RTT/CT/REC approuv√©es qui chevauchent
        overlapping_absences = await self.absences_collection.find({
            "user_id": user_id,
            "absence_type": {"$in": ["CA", "RTT", "CT", "REC"]},
            "status": "approved",
            "start_date": {"$lte": sick_end},
            "end_date": {"$gte": sick_start}
        }).to_list(length=None)
        
        reintegrations = []
        
        for absence in overlapping_absences:
            # Calculer le chevauchement
            overlap_start = max(
                sick_start,
                datetime.fromisoformat(absence["start_date"].replace('Z', '+00:00'))
            )
            overlap_end = min(
                sick_end,
                datetime.fromisoformat(absence["end_date"].replace('Z', '+00:00'))
            )
            
            # Calculer le nombre de jours ouvrables chevauch√©s
            days_overlapped = self._calculate_working_days(overlap_start, overlap_end)
            
            if days_overlapped > 0:
                # R√©int√©grer les jours
                result = await self.reintegrate_leave(
                    user_id=user_id,
                    leave_type=absence["absence_type"],
                    days=days_overlapped,
                    original_absence_id=str(absence["_id"]),
                    sick_leave_absence_id=str(sick_leave_absence["_id"])
                )
                
                reintegrations.append({
                    "absence_id": str(absence["_id"]),
                    "leave_type": absence["absence_type"],
                    "days_reintegrated": days_overlapped,
                    "new_balance": result[f"{absence['absence_type'].lower()}_balance"]
                })
                
                logger.info(
                    f"üîÑ R√©int√©gration automatique : {days_overlapped}j de {absence['absence_type']} "
                    f"pour user {user_id}"
                )
        
        return reintegrations
    
    
    def _calculate_working_days(self, start_date: datetime, end_date: datetime) -> float:
        """
        Calcule le nombre de jours ouvrables entre deux dates (L-V)
        
        Args:
            start_date: Date de d√©but
            end_date: Date de fin
            
        Returns:
            Nombre de jours ouvrables (float)
        """
        current = start_date.date() if isinstance(start_date, datetime) else start_date
        end = end_date.date() if isinstance(end_date, datetime) else end_date
        
        working_days = 0
        
        while current <= end:
            # Lundi = 0, Dimanche = 6
            if current.weekday() < 5:  # Lundi √† Vendredi
                working_days += 1
            current = date.fromordinal(current.toordinal() + 1)
        
        return float(working_days)
    
    
    # ========================================================================
    # VALIDATION AVANT APPROBATION
    # ========================================================================
    
    async def validate_leave_request(
        self,
        user_id: str,
        leave_type: str,
        days: float,
        fiscal_year: Optional[int] = None
    ) -> Dict:
        """
        Valide qu'un employ√© a suffisamment de solde avant d'approuver une absence
        
        Args:
            user_id: ID de l'employ√©
            leave_type: Type de cong√©
            days: Nombre de jours demand√©s
            fiscal_year: Ann√©e fiscale
            
        Returns:
            {
                "valid": bool,
                "message": str,
                "available": float,
                "requested": float
            }
        """
        # Types non soumis √† solde
        if leave_type not in ["CA", "RTT", "CT", "REC"]:
            return {
                "valid": True,
                "message": "Ce type d'absence n'est pas soumis √† un solde",
                "available": None,
                "requested": days
            }
        
        balance = await self.get_balance(user_id, fiscal_year)
        balance_field = f"{leave_type.lower()}_balance"
        available = balance[balance_field]
        
        if available >= days:
            return {
                "valid": True,
                "message": f"Solde suffisant ({available} jours disponibles)",
                "available": available,
                "requested": days
            }
        else:
            return {
                "valid": False,
                "message": f"Solde insuffisant : {available} jours disponibles, {days} demand√©s",
                "available": available,
                "requested": days
            }
    
    
    # ========================================================================
    # AJUSTEMENTS MANUELS (Admin)
    # ========================================================================
    
    async def manual_adjustment(
        self,
        user_id: str,
        leave_type: str,
        amount: float,
        reason: str,
        admin_user_id: str
    ) -> Dict:
        """
        Ajustement manuel du solde par un administrateur
        
        Args:
            user_id: ID de l'employ√©
            leave_type: Type de cong√©
            amount: Montant √† ajouter (positif) ou retirer (n√©gatif)
            reason: Justification obligatoire
            admin_user_id: ID de l'admin effectuant l'ajustement
            
        Returns:
            Solde mis √† jour
        """
        return await self.update_balance(
            user_id=user_id,
            leave_type=leave_type,
            amount=amount,
            operation_type="MANUAL_ADJUSTMENT",
            reason=f"Ajustement manuel par admin : {reason}",
            created_by=admin_user_id
        )
