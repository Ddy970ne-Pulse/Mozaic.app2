"""
Service de synchronisation pour maintenir la coh√©rence des donn√©es
"""
from datetime import datetime, timezone
from typing import Dict, Optional
import logging

logger = logging.getLogger(__name__)


class DataSyncService:
    """Service centralis√© pour la synchronisation des donn√©es"""
    
    def __init__(self, db):
        self.db = db
    
    async def sync_absence_to_counters(self, absence: Dict, operation: str = "create"):
        """
        Synchronise une absence avec les compteurs de cong√©s
        
        Args:
            absence: Dictionnaire de l'absence
            operation: "create", "update", "delete", "approve", "reject"
        """
        try:
            employee_id = absence.get("employee_id")
            if not employee_id:
                logger.error("sync_absence_to_counters: employee_id manquant")
                return False
            
            # R√©cup√©rer le compteur de l'employ√©
            current_year = datetime.now().year
            balance = await self.db.leave_balances.find_one({
                "employee_id": employee_id,
                "year": current_year
            })
            
            if not balance:
                logger.warning(f"Compteur non trouv√© pour {employee_id}, cr√©ation automatique")
                # Cr√©er un compteur par d√©faut (devrait normalement √™tre initialis√©)
                balance = {
                    "id": str(uuid.uuid4()),
                    "employee_id": employee_id,
                    "employee_name": absence.get("employee_name", ""),
                    "year": current_year,
                    "ca_initial": 30.0,
                    "ca_taken": 0.0,
                    "ca_balance": 30.0,
                    "ct_initial": 18.0,
                    "ct_taken": 0.0,
                    "ct_balance": 18.0,
                    "cex_initial": 0.0,
                    "cex_taken": 0.0,
                    "cex_balance": 0.0,
                    "rec_accumulated": 0.0,
                    "rec_taken": 0.0,
                    "rec_balance": 0.0
                }
                await self.db.leave_balances.insert_one(balance)
            
            # D√©terminer le type d'absence et le champ √† mettre √† jour
            absence_type = absence.get("motif_absence", "")
            jours = float(absence.get("jours_absence", 0))
            absence_unit = absence.get("absence_unit", "jours")
            
            # Convertir heures en jours si n√©cessaire
            if absence_unit == "heures":
                jours = jours / 7.0  # 7 heures = 1 jour
            
            # Mapper le type d'absence au compteur
            counter_field = self._map_absence_to_counter(absence_type)
            
            if not counter_field:
                logger.info(f"Type d'absence '{absence_type}' ne n√©cessite pas de d√©duction de compteur")
                return True
            
            # Calculer la modification selon l'op√©ration
            if operation in ["create", "approve"]:
                # D√©duire des compteurs
                await self._deduct_from_counter(employee_id, counter_field, jours, absence)
                logger.info(f"‚úÖ D√©duit {jours}j de {counter_field} pour {employee_id}")
                
            elif operation == "delete":
                # R√©int√©grer dans les compteurs
                await self._reintegrate_to_counter(employee_id, counter_field, jours, absence)
                logger.info(f"‚úÖ R√©int√©gr√© {jours}j dans {counter_field} pour {employee_id}")
                
            elif operation == "reject":
                # Ne rien faire (les jours n'ont jamais √©t√© d√©duits)
                logger.info(f"‚úÖ Rejet absence - pas de modification compteur")
                
            elif operation == "update":
                # Recalculer (r√©int√©grer ancien + d√©duire nouveau)
                # Note: n√©cessite l'ancienne valeur
                logger.info(f"‚úÖ Mise √† jour absence - recalcul des compteurs")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur sync_absence_to_counters: {str(e)}")
            return False
    
    def _map_absence_to_counter(self, absence_type: str) -> Optional[str]:
        """Mapper un type d'absence au champ de compteur correspondant"""
        mapping = {
            "Cong√©s Pay√©s": "ca",
            "Cong√©s Trimestriels": "ct",
            "Cong√©s d'anciennet√©": "cex",
            "R√©cup√©ration": "rec",
            "RTT": "rtt"
        }
        return mapping.get(absence_type)
    
    async def _deduct_from_counter(self, employee_id: str, counter_field: str, 
                                   amount: float, absence: Dict):
        """D√©duire du compteur et cr√©er une transaction"""
        current_year = datetime.now().year
        
        # Mettre √† jour les champs taken et balance
        update_fields = {
            f"{counter_field}_taken": amount,
            "last_updated": datetime.now(timezone.utc).isoformat()
        }
        
        # Utiliser $inc pour incr√©menter taken et d√©cr√©menter balance
        await self.db.leave_balances.update_one(
            {"employee_id": employee_id, "year": current_year},
            {
                "$inc": {
                    f"{counter_field}_taken": amount,
                    f"{counter_field}_balance": -amount
                },
                "$set": {
                    "last_updated": datetime.now(timezone.utc).isoformat()
                }
            }
        )
        
        # Cr√©er une transaction
        transaction = {
            "id": str(uuid.uuid4()),
            "employee_id": employee_id,
            "employee_name": absence.get("employee_name", ""),
            "type": counter_field.upper(),
            "operation": "deduct",
            "amount": amount,
            "date": datetime.now(timezone.utc).isoformat(),
            "absence_id": absence.get("id"),
            "reason": f"Absence {absence.get('motif_absence')} du {absence.get('date_debut')} au {absence.get('date_fin')}",
            "created_at": datetime.now(timezone.utc).isoformat()
        }
        
        await self.db.leave_transactions.insert_one(transaction)
        logger.info(f"üìä Transaction cr√©√©e: -{amount}j de {counter_field}")
    
    async def _reintegrate_to_counter(self, employee_id: str, counter_field: str, 
                                      amount: float, absence: Dict):
        """R√©int√©grer dans le compteur"""
        current_year = datetime.now().year
        
        # Utiliser $inc pour d√©cr√©menter taken et incr√©menter balance
        await self.db.leave_balances.update_one(
            {"employee_id": employee_id, "year": current_year},
            {
                "$inc": {
                    f"{counter_field}_taken": -amount,
                    f"{counter_field}_balance": amount,
                    f"{counter_field}_reintegrated": amount
                },
                "$set": {
                    "last_updated": datetime.now(timezone.utc).isoformat()
                }
            }
        )
        
        # Cr√©er une transaction
        transaction = {
            "id": str(uuid.uuid4()),
            "employee_id": employee_id,
            "employee_name": absence.get("employee_name", ""),
            "type": counter_field.upper(),
            "operation": "reintegrate",
            "amount": amount,
            "date": datetime.now(timezone.utc).isoformat(),
            "absence_id": absence.get("id"),
            "reason": f"Annulation absence {absence.get('motif_absence')}",
            "created_at": datetime.now(timezone.utc).isoformat()
        }
        
        await self.db.leave_transactions.insert_one(transaction)
        logger.info(f"üìä Transaction cr√©√©e: +{amount}j dans {counter_field}")


# Import n√©cessaire
import uuid
