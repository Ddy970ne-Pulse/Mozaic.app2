"""
Script de test du workflow double validation CCN66
"""
import requests
import json
import os
from dotenv import load_dotenv

load_dotenv()

# Configuration
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://rh-planning-app.preview.emergentagent.com')
BASE_URL = f"{BACKEND_URL}/api"

def test_workflow():
    print("üß™ TEST WORKFLOW DOUBLE VALIDATION CCN66\n")
    print("="*80)
    
    # ==================== √âTAPE 1: Login Manager ====================
    print("\n1Ô∏è‚É£ Login Manager...")
    try:
        login_manager = requests.post(f"{BASE_URL}/auth/login", json={
            "email": "jedau@aaea-gpe.fr",  # Manager Jacques EDAU
            "password": "gPGlceec"
        })
        
        if login_manager.status_code != 200:
            print(f"‚ùå √âchec login manager: {login_manager.status_code}")
            print(f"   R√©ponse: {login_manager.text}")
            return
        
        manager_data = login_manager.json()
        manager_token = manager_data.get("token")
        print(f"‚úÖ Manager connect√©: {manager_data.get('name', 'N/A')}")
        print(f"   Role: {manager_data.get('role', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur login manager: {e}")
        return
    
    # ==================== √âTAPE 2: Trouver une absence pending ====================
    print("\n2Ô∏è‚É£ Recherche d'une absence 'pending'...")
    try:
        response = requests.get(
            f"{BASE_URL}/absences",
            headers={"Authorization": f"Bearer {manager_token}"}
        )
        
        if response.status_code == 200:
            absences = response.json()
            pending_absences = [a for a in absences if a.get('status') == 'pending']
            
            if not pending_absences:
                print("‚ö†Ô∏è  Aucune absence 'pending' trouv√©e")
                print("   Cr√©ez une absence via l'interface pour tester le workflow")
                return
            
            test_absence = pending_absences[0]
            absence_id = test_absence['id']
            
            print(f"‚úÖ Absence trouv√©e:")
            print(f"   ID: {absence_id}")
            print(f"   Employ√©: {test_absence.get('employee_name', 'N/A')}")
            print(f"   Type: {test_absence.get('motif_absence', 'N/A')}")
            print(f"   Dates: {test_absence.get('date_debut', 'N/A')} ‚Üí {test_absence.get('date_fin', 'N/A')}")
            print(f"   Status actuel: {test_absence.get('status', 'N/A')}")
        else:
            print(f"‚ùå Erreur r√©cup√©ration absences: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return
    
    # ==================== √âTAPE 3: Manager pr√©-valide ====================
    print("\n3Ô∏è‚É£ Manager PR√â-VALIDE l'absence...")
    try:
        response = requests.put(
            f"{BASE_URL}/absences/{absence_id}",
            headers={"Authorization": f"Bearer {manager_token}"},
            json={"status": "validated_by_manager"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Pr√©-validation r√©ussie!")
            print(f"   Status: {result.get('status_change', 'N/A')}")
            print(f"   Workflow: {result.get('workflow_step', 'N/A')}")
            print(f"   Compteurs synchronis√©s: {result.get('counters_synced', False)}")
            print(f"   ‚ö†Ô∏è  Les compteurs NE DOIVENT PAS √™tre d√©duits √† cette √©tape")
        else:
            print(f"‚ùå √âchec pr√©-validation: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Erreur pr√©-validation: {e}")
        return
    
    # ==================== √âTAPE 4: Login Admin ====================
    print("\n4Ô∏è‚É£ Login Admin...")
    try:
        login_admin = requests.post(f"{BASE_URL}/auth/login", json={
            "email": "ddacalor@aaea-gpe.fr",
            "password": "admin123"
        })
        
        if login_admin.status_code != 200:
            print(f"‚ùå √âchec login admin: {login_admin.status_code}")
            return
        
        admin_data = login_admin.json()
        admin_token = admin_data.get("token")
        print(f"‚úÖ Admin connect√©: {admin_data.get('name', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur login admin: {e}")
        return
    
    # ==================== √âTAPE 5: Admin approuve ====================
    print("\n5Ô∏è‚É£ Admin APPROUVE l'absence (approbation finale)...")
    try:
        response = requests.put(
            f"{BASE_URL}/absences/{absence_id}",
            headers={"Authorization": f"Bearer {admin_token}"},
            json={"status": "approved"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Approbation finale r√©ussie!")
            print(f"   Status: {result.get('status_change', 'N/A')}")
            print(f"   Workflow: {result.get('workflow_step', 'N/A')}")
            print(f"   Compteurs synchronis√©s: {result.get('counters_synced', False)}")
            print(f"   ‚úÖ Les compteurs DOIVENT √™tre d√©duits maintenant!")
        else:
            print(f"‚ùå √âchec approbation: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Erreur approbation: {e}")
        return
    
    print("\n" + "="*80)
    print("‚úÖ TEST WORKFLOW TERMIN√â AVEC SUCC√àS!")
    print("\nR√©sum√©:")
    print("  1Ô∏è‚É£ Manager a pr√©-valid√© ‚Üí status='validated_by_manager' (pas de d√©duction)")
    print("  2Ô∏è‚É£ Admin a approuv√© ‚Üí status='approved' (d√©duction compteurs)")
    print("\nV√©rifiez les compteurs de l'employ√© dans l'interface!")

if __name__ == "__main__":
    test_workflow()
