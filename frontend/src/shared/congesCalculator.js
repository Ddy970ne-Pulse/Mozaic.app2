// Calculateur de cong√©s pay√©s selon le droit fran√ßais du travail
// Conforme au Code du travail fran√ßais (Articles L3141-1 et suivants)

export const LEAVE_CALCULATION_RULES = {
  // Les cong√©s se d√©comptent en jours ouvrables (L3141-3)
  WORKING_DAYS: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],
  
  // Jours non d√©compt√©s du solde de cong√©s
  NON_DEDUCTED_DAYS: ['sunday'],  // Dimanches jamais d√©compt√©s
  
  // Types de jours pendant les cong√©s
  DEDUCTION_RULES: {
    WORKING_DAY: 'deduct',        // Jour ouvrable : d√©compte
    SATURDAY: 'deduct',           // Samedi : d√©compte (jour ouvrable)
    SUNDAY: 'no_deduct',          // Dimanche : pas de d√©compte
    HOLIDAY: 'no_deduct',         // Jour f√©ri√© : pas de d√©compte
    SICK_LEAVE: 'restore'         // Arr√™t maladie : restitue le jour de cong√©
  }
};

// Calcule le nombre de jours de cong√©s d√©compt√©s pour une p√©riode donn√©e
export const calculateLeaveDeduction = (startDate, endDate, holidays2025, sickLeaveDays = []) => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  let currentDate = new Date(start);
  
  let totalRequested = 0;      // Jours de cong√©s demand√©s initialement
  let actuallyDeducted = 0;    // Jours r√©ellement d√©compt√©s du solde
  let nonDeductedDays = [];    // D√©tail des jours non d√©compt√©s
  let restoredDays = [];       // Jours restitu√©s (arr√™t maladie)
  
  while (currentDate <= end) {
    const dateStr = currentDate.toISOString().split('T')[0];
    const dayOfWeek = currentDate.getDay(); // 0=dimanche, 1=lundi, ..., 6=samedi
    
    totalRequested++;
    
    // V√©rifier si c'est un arr√™t maladie pendant les cong√©s
    if (sickLeaveDays.includes(dateStr)) {
      restoredDays.push({
        date: dateStr,
        reason: 'Arr√™t maladie pendant cong√©s',
        type: 'SICK_LEAVE'
      });
      // L'arr√™t maladie interrompt les cong√©s, le jour est restitu√©
      continue;
    }
    
    // V√©rifier si c'est un jour f√©ri√©
    const isHoliday = holidays2025.some(holiday => holiday.date === dateStr);
    if (isHoliday) {
      const holiday = holidays2025.find(h => h.date === dateStr);
      nonDeductedDays.push({
        date: dateStr,
        reason: `Jour f√©ri√©: ${holiday.name}`,
        type: 'HOLIDAY'
      });
      continue;
    }
    
    // V√©rifier si c'est un dimanche
    if (dayOfWeek === 0) {
      nonDeductedDays.push({
        date: dateStr,
        reason: 'Dimanche (jour non ouvrable)',
        type: 'SUNDAY'
      });
      continue;
    }
    
    // Jours ouvrables (lundi au samedi) : d√©compte normal
    if (dayOfWeek >= 1 && dayOfWeek <= 6) {
      actuallyDeducted++;
    }
    
    currentDate.setDate(currentDate.getDate() + 1);
  }
  
  return {
    totalRequested,
    actuallyDeducted,
    nonDeductedDays,
    restoredDays,
    savings: totalRequested - actuallyDeducted,
    breakdown: {
      workingDays: actuallyDeducted,
      sundays: nonDeductedDays.filter(d => d.type === 'SUNDAY').length,
      holidays: nonDeductedDays.filter(d => d.type === 'HOLIDAY').length,
      sickLeaveDays: restoredDays.length
    }
  };
};

// Valide si une p√©riode de cong√©s est correctement calcul√©e
export const validateLeaveCalculation = (leaveData) => {
  const errors = [];
  const warnings = [];
  
  // V√©rification : cong√©s pos√©s le weekend
  if (leaveData.breakdown.sundays > 0) {
    warnings.push(`${leaveData.breakdown.sundays} dimanche(s) inclus(s) - non d√©compt√©s du solde`);
  }
  
  // V√©rification : cong√©s incluant des jours f√©ri√©s
  if (leaveData.breakdown.holidays > 0) {
    warnings.push(`${leaveData.breakdown.holidays} jour(s) f√©ri√©(s) inclus(s) - non d√©compt√©s du solde`);
  }
  
  // V√©rification : arr√™ts maladie pendant cong√©s
  if (leaveData.breakdown.sickLeaveDays > 0) {
    warnings.push(`${leaveData.breakdown.sickLeaveDays} jour(s) d'arr√™t maladie - jours restitu√©s au salari√©`);
  }
  
  // √âconomies r√©alis√©es
  if (leaveData.savings > 0) {
    warnings.push(`√âconomie: ${leaveData.savings} jour(s) non d√©compt√©s du solde de cong√©s`);
  }
  
  return { errors, warnings, isValid: errors.length === 0 };
};

// G√©n√®re un rapport d√©taill√© de calcul de cong√©s
export const generateLeaveReport = (employeeName, startDate, endDate, calculation, validation) => {
  const start = new Date(startDate).toLocaleDateString('fr-FR');
  const end = new Date(endDate).toLocaleDateString('fr-FR');
  
  let report = `üìã CALCUL CONG√âS PAY√âS - ${employeeName.toUpperCase()}\n\n`;
  report += `üìÖ P√©riode demand√©e: ${start} au ${end}\n`;
  report += `üìä Dur√©e totale: ${calculation.totalRequested} jour(s)\n\n`;
  
  report += `üí∞ D√âCOMPTE DU SOLDE:\n`;
  report += `‚Ä¢ Jours r√©ellement d√©compt√©s: ${calculation.actuallyDeducted}\n`;
  report += `‚Ä¢ Jours ouvrables (Lu-Sa): ${calculation.breakdown.workingDays}\n`;
  
  if (calculation.breakdown.sundays > 0) {
    report += `‚Ä¢ Dimanches non d√©compt√©s: ${calculation.breakdown.sundays}\n`;
  }
  
  if (calculation.breakdown.holidays > 0) {
    report += `‚Ä¢ Jours f√©ri√©s non d√©compt√©s: ${calculation.breakdown.holidays}\n`;
  }
  
  if (calculation.breakdown.sickLeaveDays > 0) {
    report += `‚Ä¢ Jours restitu√©s (arr√™t maladie): ${calculation.breakdown.sickLeaveDays}\n`;
  }
  
  if (calculation.savings > 0) {
    report += `\n‚úÖ √âCONOMIE R√âALIS√âE: ${calculation.savings} jour(s) pr√©serv√©s\n`;
  }
  
  // D√©tail des jours non d√©compt√©s
  if (calculation.nonDeductedDays.length > 0) {
    report += `\nüìù D√âTAIL DES JOURS NON D√âCOMPT√âS:\n`;
    calculation.nonDeductedDays.forEach(day => {
      const date = new Date(day.date).toLocaleDateString('fr-FR');
      report += `‚Ä¢ ${date}: ${day.reason}\n`;
    });
  }
  
  // Jours restitu√©s pour arr√™t maladie
  if (calculation.restoredDays.length > 0) {
    report += `\nüè• JOURS RESTITU√âS (ARR√äT MALADIE):\n`;
    calculation.restoredDays.forEach(day => {
      const date = new Date(day.date).toLocaleDateString('fr-FR');
      report += `‚Ä¢ ${date}: ${day.reason}\n`;
    });
    report += `\n‚öñÔ∏è R√àGLE L√âGALE: Les jours d'arr√™t maladie pendant les cong√©s sont restitu√©s au salari√© (Art. L3141-5)\n`;
  }
  
  // Avertissements
  if (validation.warnings.length > 0) {
    report += `\n‚ö†Ô∏è INFORMATIONS:\n`;
    validation.warnings.forEach(warning => {
      report += `‚Ä¢ ${warning}\n`;
    });
  }
  
  report += `\nüìö BASE L√âGALE: Code du travail Art. L3141-3 (d√©compte en jours ouvrables)\n`;
  
  return report;
};

// Utilitaires pour l'interface utilisateur
export const LeaveCalculatorUtils = {
  // Formate l'affichage d'une p√©riode de cong√©s
  formatLeavePeriod: (calculation) => {
    if (calculation.actuallyDeducted !== calculation.totalRequested) {
      return `${calculation.totalRequested}j demand√©s ‚Üí ${calculation.actuallyDeducted}j d√©compt√©s`;
    }
    return `${calculation.actuallyDeducted}j d√©compt√©s`;
  },
  
  // G√©n√®re une classe CSS selon l'√©conomie r√©alis√©e
  getLeaveDisplayClass: (calculation) => {
    if (calculation.savings > 0) {
      return 'text-green-600 font-semibold'; // √âconomie r√©alis√©e
    }
    return 'text-blue-600'; // D√©compte normal
  },
  
  // G√©n√®re un tooltip explicatif
  getLeaveTooltip: (calculation) => {
    let tooltip = `${calculation.totalRequested} jour(s) demand√©s\n`;
    tooltip += `${calculation.actuallyDeducted} jour(s) d√©compt√©s du solde\n`;
    
    if (calculation.savings > 0) {
      tooltip += `${calculation.savings} jour(s) pr√©serv√©s (WE/f√©ri√©s/arr√™t)`;
    }
    
    return tooltip;
  }
};

export default {
  LEAVE_CALCULATION_RULES,
  calculateLeaveDeduction,
  validateLeaveCalculation,
  generateLeaveReport,
  LeaveCalculatorUtils
};